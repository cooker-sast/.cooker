# 注意参数之间不能有空格
transfers:
  # String 的拼接
  - { method: "<java.lang.String: java.lang.String[] split(java.lang.String)>",from: base,to: result,type: "java.lang.String[]" }
  - { method: "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",from: base,to: result,type: "java.lang.String[]" }
  - { method: "<java.lang.String: java.lang.String concat(java.lang.String)>",from: base,to: result,type: "java.lang.String" }
  - { method: "<java.lang.String: java.lang.String concat(java.lang.String)>",from: 0,to: result,type: "java.lang.String" }
  - { method: "<java.lang.String: char[] toCharArray()>",from: base,to: result,type: "char[]" }
  - { method: "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",from: 0,to: base,type: "java.lang.StringBuffer" }
  - { method: "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>",from: 0,to: base,type: "java.lang.StringBuffer" }
  - { method: "<java.lang.StringBuffer: java.lang.String toString()>",from: base,to: result,type: "java.lang.String" }
  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",from: 0,to: result,type: "java.lang.StringBuilder" }
  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",from: base,to: result,type: "java.lang.StringBuilder" }
  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",from: 0,to: base,type: "java.lang.StringBuilder" }
  - { method: "<java.lang.StringBuilder: java.lang.String toString()>",from: base,to: result,type: "java.lang.String" }
  - { method: "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: void getChars(char[],int)>",from: base,to: 0,type: "char[]"}
  - { method: "<java.lang.String: void getChars(int,int,char[],int)>",from: base,to: 2,type: "char[]"}
  - { method: "<java.lang.String: void getBytes(int,int,byte[],int)>",from: base,to: 2,type: "byte[]"}
  - { method: "<java.lang.String: byte[] getBytes(java.lang.String)>",from: base,to: result,type: "byte[]"}
  - { method: "<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>",from: base,to: result,type: "byte[]"}
  - { method: "<java.lang.String: byte[] getBytes()>",from: base,to: result,type: "byte[]"}
  - { method: "<java.lang.String: java.lang.String substring(int)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String substring(int,int)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.CharSequence subSequence(int,int)>",from: base,to: result,type: "java.lang.CharSequence"}
  - { method: "<java.lang.String: java.lang.String replace(char,char)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replace(char,char)>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>",from: 1,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String toLowerCase()>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String toUpperCase()>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String trim()>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String toString()>",from: base,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: char[] toCharArray()>",from: base,to: result,type: "char[]"}
  - { method: "<java.lang.String: java.lang.String valueOf(java.lang.Object)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(char[])>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(char[],int,int)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String copyValueOf(char[],int,int)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String copyValueOf(char[])>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(boolean)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(char)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(int)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(float)>",from: 0,to: result,type: "java.lang.String"}
  - { method: "<java.lang.String: java.lang.String valueOf(double)>",from: 0,to: result,type: "java.lang.String"}
  

  # ByteArray 的读写
  - { method: "<java.io.InputStream: int read(byte[])>",from: base,to: 0,type: "byte[]" }
  - { method: "<java.io.ByteArrayOutputStream: void write(byte[])>",from: 0,to: base,type: "java.io.ByteArrayOutputStream" }
  - { method: "<java.io.ByteArrayOutputStream: byte[] toByteArray()>",from: base,to: result,type: "byte[]" }
  # base64 加密解密
  - { method: "<java.util.Base64$Decoder: byte[] decode(byte[])>",from: 0,to: result,type: "byte[]" }
  - { method: "<java.util.Base64$Encoder: byte[] encode(byte[])>",from: 0,to: result,type: "byte[]" }

  # url encode decode
  - { method: "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>",from: 0,to: result,type: "java.lang.String" }
  - { method: "<java.net.URLEncoder: java.lang.String encode(java.lang.String)>",from: 0,to: result,type: "java.lang.String" }
  - { method: "<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>",from: 0,to: result,type: "java.lang.String" }
  - { method: "<java.net.URLDecoder: java.lang.String decode(java.lang.String)>",from: 0,to: result,type: "java.lang.String" }

  # collection 相关的污点传播
  # 普通 collection 的 toString() 可能会打印数据结构内的信息
  - { method: "<java.util.Map: java.lang.String toString()>",from: base,to: result,type: "java.lang.String" }
  # List 相关
  - { method: "<java.util.ArrayList: boolean add(java.lang.Object)>",from: 0,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: boolean addAll(java.util.Collection)>",from: 0,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: boolean addAll(int,java.util.Collection)>",from: 1,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: java.lang.Object[] toArray()>",from: base,to: result,type: "java.lang.Object[]" }
  - { method: "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",from: base,to: result,type: "java.lang.Object[]" }
  - { method: "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",from: base,to: 0,type: "java.lang.Object[]" }
  - { method: "<java.util.ArrayList: java.lang.Object get(int)>",from: base,to: result,type: "java.lang.Object" }
  - { method: "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>",from: 0,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: void add(int,java.lang.Object)>",from: 1,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: java.util.List subList(int,int)>",from: base,to: result,type: "java.util.ArrayList$SubList" }
  - { method: "<java.util.ArrayList: void add(int,java.lang.Object)>",from: 1,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: void add(int,java.lang.Object)>",from: 1,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: void add(int,java.lang.Object)>",from: 1,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.ArrayList: void add(int,java.lang.Object)>",from: 1,to: base,type: "java.util.ArrayList" }
  - { method: "<java.util.Arrays: java.util.List asList(java.lang.Object[])>",from: 0,to: result,type: "java.util.Arrays$ArrayList" }
  #map get put
  - { method: "<java.util.HashMap: java.lang.Object get(java.lang.Object)>",from: base,to: result,type: "java.lang.Object" }
  - { method: "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",from: 1,to: base,type: "java.util.HashMap" }

  #queue
  - { method: "<java.util.ArrayDeque: boolean add(java.lang.Object)>",from: 0,to: base,type: "java.util.ArrayDeque" }


  #class是taint说明这个class的classcode是可控的，所以newInstance得到的实例也是taint
  - { method: "<java.lang.Class: java.lang.Object newInstance()>",from: base,to: result,type: "java.lang.Object" }

# reflect transfer 就最好返回一个 实际的object 了，type 不要是一个 interface
reflect-transfers:
  # 处理反射，对于反射相关的方法，调用之后肯定会返回一个 object
  - { method: "<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",from: base,to: result,type: "java.lang.Object" }
  - { method: "<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>",from: base,to: result,type: "java.lang.Object" }
  - { method: "<java.lang.Class: java.lang.Class forName(java.lang.String)>",from: 0,to: result,type: "java.lang.Class" }
  - { method: "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",from: base,to: result,type: "java.lang.reflect.Method" }
  - { method: "<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",from: base,to: result,type: "java.lang.reflect.Field[]" }
  - { method: "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>",from: 2,to: result,type: "java.lang.Class" }